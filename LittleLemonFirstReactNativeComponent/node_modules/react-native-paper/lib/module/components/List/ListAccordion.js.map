{"version":3,"sources":["ListAccordion.tsx"],"names":["color","React","View","StyleSheet","I18nManager","TouchableRipple","MaterialCommunityIcon","Text","withTheme","ListAccordionGroupContext","ListAccordion","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expanded","expandedProp","setExpanded","useState","handlePressAction","undefined","titleColor","colors","text","alpha","rgb","string","descriptionColor","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","handlePress","onAccordionPress","backgroundColor","background","styles","container","row","primary","item","content","multiline","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  I18nManager,\n} from 'react-native';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\n\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\n\ntype Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = () => {\n    onPress?.();\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n  const descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme.colors.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          testID={testID}\n          delayPressIn={0}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: isExpanded ? theme.colors.primary : titleColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description && (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              )}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={titleColor}\n                  size={24}\n                  direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListAccordion);\n"]}